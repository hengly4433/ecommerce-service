name: CI-CD

on:
  push:
    branches: [ "main", "master" ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }} # owner/repo

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Build & Test (Maven)
        run: mvn -B -DskipITs=false clean verify

  docker:
    runs-on: ubuntu-latest
    needs: build-test
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,format=short,prefix=,suffix=

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    name: Deploy to Swarm
    needs: docker
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Copy stack file
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          source: "docker-stack.yml"
          target: "/home/${{ secrets.SSH_USER }}/ecommerce"

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          script: |
            set -e
            cd ~/ecommerce

            # Prepare Swarm (no-op if already done)
            docker swarm init || true
            docker network create --driver overlay --attachable edge || true

            # Login to GHCR on the server (pull permissions)
            echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ secrets.GHCR_USER || github.actor }}" --password-stdin

            # Ensure/refresh secrets
            update_secret() {
              local name="$1"
              local val="$2"
              if docker secret ls --format '{{.Name}}' | grep -q "^${name}\$"; then
                docker secret rm "${name}"
              fi
              echo -n "${val}" | docker secret create "${name}" -
            }
            update_secret db_password "${{ secrets.DB_PASSWORD }}"
            update_secret jwt_secret "${{ secrets.JWT_SECRET }}"

            # Use latest image built in previous job
            IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
            echo "Using image: ${IMAGE}"

            # Patch image in stack if you templated it. Otherwise set image with --with-registry-auth
            docker stack deploy -c docker-stack.yml ecommerce --with-registry-auth

            docker service ls
            docker service ps ecommerce_app --no-trunc
